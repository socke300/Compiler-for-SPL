Index: java/src/main/java/de/thm/mni/compilerbau/phases/_02_03_parser/parser.cup
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.thm.mni.compilerbau.phases._02_03_parser;\r\n\r\nimport java_cup.runtime.*;\r\nimport de.thm.mni.compilerbau.utils.*;\r\nimport de.thm.mni.compilerbau.absyn.*;\r\nimport de.thm.mni.compilerbau.table.Identifier;\r\nimport de.thm.mni.compilerbau.utils.SplError;\r\n\r\nparser code {:\r\n  public void syntax_error(Symbol currentToken) {\r\n    throw SplError.SyntaxError(new Position(currentToken.left, currentToken.right));\r\n  }\r\n:}\r\n\r\n/* Terminals/Tokens */\r\nterminal LBRACK, RBRACK, LPAREN, RPAREN, LCURL, RCURL;         //Braces, parenthesis, brackets\r\nterminal LT, LE, GT, GE, NE, EQ;                               //Comparison operators\r\nterminal PLUS, MINUS, STAR, SLASH;                             //Arithmetic operators\r\nterminal ASGN, COMMA, COLON, SEMIC;                            //Other delimiters\r\nterminal TYPE, PROC, ARRAY, OF, REF, VAR, IF, ELSE, WHILE;     //Keywords\r\nterminal Identifier IDENT;                                     //Identifiers\r\nterminal Integer INTLIT;                                       //Integer literals\r\n\r\n/* Non-terminals */\r\nnon terminal Program program;\r\nnon terminal List<GlobalDeclaration> globalDeclarations;\r\nnon terminal GlobalDeclaration globalDeclaration;\r\nnon terminal TypeDeclaration typeDeclaration;\r\nnon terminal ProcedureDeclaration procedure;\r\nnon terminal List<ParameterDeclaration> parameterList;\r\nnon terminal ParameterDeclaration parameterDeclaration;\r\nnon terminal CompoundStatement statementList;\r\nnon terminal Statement statement;\r\nnon terminal Expression expression;\r\nnon terminal AssignStatement assignmentStatement;\r\nnon terminal BinaryExpression.Operator comparisonOperator;\r\nnon terminal factor; //---------------------------------\r\nnon terminal IfStatement ifStatement;\r\nnon terminal CallStatement functionStatement;\r\nnon terminal List<Expression> argumentList;\r\nnon terminal VariableDeclaration varDeclaration;\r\nnon terminal WhileStatement whileStatement;\r\nnon terminal TypeExpression typeExpression;\r\nnon terminal List<Variable> variableList;\r\nnon terminal Variable variable;\r\nnon terminal Expression addexpression;\r\nnon terminal Expression mulExpression;\r\nnon terminal BinaryExpression booleanExpression;\r\n\r\n//GLOBAL\r\nstart with program;\r\nprogram ::= globalDeclarations:gd {: RESULT = new Program(new Position(gdleft,gdright), gd);:};\r\nglobalDeclarations ::= globalDeclaration globalDeclarations | ;\r\nglobalDeclaration ::= typeDeclaration:td {: RESULT = td;:}\r\n                    | procedure;\r\n\r\n//DECLARATION\r\ntypeDeclaration ::= TYPE IDENT:id EQ typeExpression:ex SEMIC {: RESULT = new TypeDeclaration(new Position(exleft,exright),id ,ex); :};\r\nparameterDeclaration ::= IDENT COLON typeExpression | REF IDENT COLON typeExpression;\r\nvarDeclaration ::= VAR IDENT COLON typeExpression SEMIC;\r\n\r\n//EXPRESSION\r\ntypeExpression ::= ARRAY LBRACK INTLIT RBRACK OF typeExpression\r\n                 | IDENT;\r\n\r\nbooleanExpression ::= addexpression:opl comparisonOperator:op addexpression:opr {: RESULT = new BinaryExpression(new Position(opleft, opright) , op, opl, opr); :};\r\n\r\n//STATEMENT\r\nstatement ::= assignmentStatement | ifStatement | functionStatement | LCURL statementList RCURL | SEMIC | whileStatement;\r\nassignmentStatement ::= variable ASGN addexpression SEMIC;\r\nifStatement ::= IF LPAREN booleanExpression RPAREN statement | IF LPAREN booleanExpression RPAREN statement ELSE statement;\r\nwhileStatement ::= WHILE LPAREN booleanExpression RPAREN statement;\r\nfunctionStatement ::= IDENT LPAREN argumentList RPAREN SEMIC;\r\n\r\n//LIST\r\nparameterList ::= parameterDeclaration COMMA parameterList | parameterDeclaration |;\r\nstatementList ::= statement statementList |;\r\nvariableList ::= varDeclaration variableList |;\r\nargumentList ::= addexpression COMMA argumentList| addexpression |;\r\n\r\n//OPERATOR\r\ncomparisonOperator ::= LT {: RESULT = BinaryExpression.Operator.LST; :}\r\n                     | LE {: RESULT = BinaryExpression.Operator.LSE; :}\r\n                     | GT {: RESULT = BinaryExpression.Operator.GRT; :}\r\n                     | GE {: RESULT = BinaryExpression.Operator.GRE; :}\r\n                     | NE {: RESULT = BinaryExpression.Operator.NEQ; :}\r\n                     | EQ {: RESULT = BinaryExpression.Operator.EQU; :};\r\n\r\n//OTHER\r\naddexpression ::= addexpression PLUS mulExpression | addexpression MINUS mulExpression | mulExpression;\r\nmulExpression ::= mulExpression STAR factor | mulExpression SLASH factor | factor;\r\nfactor ::= expression | MINUS factor;\r\nexpression ::= INTLIT | variable | LPAREN addexpression RPAREN;\r\nvariable ::= IDENT | variable LBRACK addexpression RBRACK;\r\nprocedure ::= PROC IDENT LPAREN parameterList RPAREN LCURL variableList statementList RCURL;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- java/src/main/java/de/thm/mni/compilerbau/phases/_02_03_parser/parser.cup	(revision ffcdacd1c625d483d28bbc72f6e46aff59182801)
+++ java/src/main/java/de/thm/mni/compilerbau/phases/_02_03_parser/parser.cup	(date 1608132768941)
@@ -55,7 +55,7 @@
                     | procedure;
 
 //DECLARATION
-typeDeclaration ::= TYPE IDENT:id EQ typeExpression:ex SEMIC {: RESULT = new TypeDeclaration(new Position(exleft,exright),id ,ex); :};
+typeDeclaration ::= TYPE IDENT EQ typeExpression:ex SEMIC {: RESULT = new TypeDeclaration(new Position(exleft,exright),new Identifier("name") ,ex); :};
 parameterDeclaration ::= IDENT COLON typeExpression | REF IDENT COLON typeExpression;
 varDeclaration ::= VAR IDENT COLON typeExpression SEMIC;
 
