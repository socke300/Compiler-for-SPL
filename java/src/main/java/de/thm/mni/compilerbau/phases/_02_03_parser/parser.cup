package de.thm.mni.compilerbau.phases._02_03_parser;

import java_cup.runtime.*;
import de.thm.mni.compilerbau.utils.*;
import de.thm.mni.compilerbau.absyn.*;
import de.thm.mni.compilerbau.table.Identifier;
import de.thm.mni.compilerbau.utils.SplError;

parser code {:
  public void syntax_error(Symbol currentToken) {
    throw SplError.SyntaxError(new Position(currentToken.left, currentToken.right));
  }
:}

/* Terminals/Tokens */
terminal LBRACK, RBRACK, LPAREN, RPAREN, LCURL, RCURL;         //Braces, parenthesis, brackets
terminal LT, LE, GT, GE, NE, EQ;                               //Comparison operators
terminal PLUS, MINUS, STAR, SLASH;                             //Arithmetic operators
terminal ASGN, COMMA, COLON, SEMIC;                            //Other delimiters
terminal TYPE, PROC, ARRAY, OF, REF, VAR, IF, ELSE, WHILE;     //Keywords
terminal String IDENT;                                     //Identifiers
terminal Integer INTLIT;                                       //Integer literals

/* Non-terminals */
non terminal Program program;
non terminal List<GlobalDeclaration> globalDeclarations;
non terminal GlobalDeclaration globalDeclaration;
non terminal TypeDeclaration typeDeclaration;
non terminal ProcedureDeclaration procedure;
non terminal List<ParameterDeclaration> parameterList;
non terminal ParameterDeclaration parameterDeclaration;
non terminal List<Statement> statementList;
non terminal Statement statement;
non terminal Expression expression;
non terminal AssignStatement assignmentStatement;
non terminal BinaryExpression.Operator comparisonOperator;
non terminal factor; //---------------------------------
non terminal IfStatement ifStatement;
non terminal CallStatement functionStatement;
non terminal List<Expression> argumentList;
non terminal VariableDeclaration varDeclaration;
non terminal WhileStatement whileStatement;
non terminal TypeExpression typeExpression;
non terminal List<VariableDeclaration> variableList;
non terminal Variable variable;
non terminal Expression addexpression;
non terminal Expression mulExpression;
non terminal BinaryExpression booleanExpression;

//GLOBAL
start with program;


program ::= globalDeclarations:gd {:RESULT = new Program(new Position(gdleft,gdright), gd);:};
globalDeclarations ::= globalDeclaration:gde globalDeclarations:gds {:RESULT = new List(gde, gds); :} | {: RESULT = List.nil();:};
globalDeclaration ::= typeDeclaration:td {:RESULT = td;:} | procedure:pr {:RESULT = pr;:};

//DECLARATION
typeDeclaration ::= TYPE:tp IDENT:id EQ typeExpression:ex SEMIC {:RESULT = new TypeDeclaration(new Position(tpleft,tpright),new Identifier(id), ex);:};
parameterDeclaration ::= IDENT:id COLON typeExpression:te {:RESULT = new ParameterDeclaration(new Position(idleft, idright), new Identifier(id), te, false);:} | REF IDENT:id COLON typeExpression:te {:RESULT = new ParameterDeclaration(new Position(idleft, idright), new Identifier(id), te, true);:};
varDeclaration ::= VAR:var IDENT:id COLON typeExpression:te SEMIC {:RESULT = new VariableDeclaration(new Position(varleft, varright), new Identifier(id), te);:};

//EXPRESSION
booleanExpression ::= addexpression:opl comparisonOperator:op addexpression:opr {: RESULT = new BinaryExpression(new Position(opleft, opright) , op, opl, opr); :};
typeExpression ::= ARRAY:ar LBRACK INTLIT:in RBRACK OF typeExpression:ex {:if(in != null) RESULT = new ArrayTypeExpression(new Position(arleft,arright),ex , in);:} | IDENT:id {:RESULT = new NamedTypeExpression(new Position(idleft,idright), new Identifier(id));:};

//STATEMENT
statement ::= assignmentStatement:as {:RESULT = as;:} | ifStatement:is {:RESULT = is;:} | functionStatement:fs {:RESULT = fs;:}  | LCURL statementList RCURL | SEMIC:sm {:RESULT = new EmptyStatement(new Position(smleft, smright));:} | whileStatement:ws {:RESULT = ws;:};
assignmentStatement ::= variable:var ASGN addexpression:ae SEMIC {:RESULT = new AssignStatement(new Position(varleft, varright), var, ae);:};
ifStatement ::= IF LPAREN booleanExpression RPAREN statement | IF LPAREN booleanExpression RPAREN statement ELSE statement;
whileStatement ::= WHILE:wh LPAREN booleanExpression:be RPAREN statement:st {:RESULT = new WhileStatement(new Position(whleft, whright), be, st);:};
functionStatement ::= IDENT:id LPAREN argumentList:al RPAREN SEMIC {:RESULT = new CallStatement(new Position(idleft, idright), new Identifier(id), al);:};

//LIST
parameterList ::= parameterDeclaration:pd COMMA parameterList:pl {:RESULT = new List(pd, pl);:} | parameterDeclaration:pd {:RESULT = new List(pd, List.nil());:} | {:RESULT = List.nil();:};
statementList ::= statement:st statementList:sl {:RESULT = new List(st, sl);:} | {:RESULT = List.nil();:};
variableList ::= varDeclaration:vd variableList:vl {:RESULT = new List(vd, vl);:}| {:RESULT = List.nil();:};
argumentList ::= addexpression:ae COMMA argumentList:al {:RESULT = new List(ae, al);:}| addexpression:ae {:RESULT = new List(ae, List.nil());:} | {:RESULT = List.nil();:};

//OPERATOR
comparisonOperator ::= LT {: RESULT = BinaryExpression.Operator.LST; :} | LE {: RESULT = BinaryExpression.Operator.LSE; :} | GT {: RESULT = BinaryExpression.Operator.GRT; :} | GE {: RESULT = BinaryExpression.Operator.GRE; :} | NE {: RESULT = BinaryExpression.Operator.NEQ; :} | EQ {: RESULT = BinaryExpression.Operator.EQU; :};

//OTHER
addexpression ::= addexpression:ae PLUS:pl mulExpression:me {:RESULT = new BinaryExpression(new Position(aeleft, aeright), pl, ae, me);:} | addexpression:ae MINUS:mi mulExpression:me {:RESULT = new BinaryExpression(new Position(aeleft, aeright), mi, ae, me);:} | mulExpression:me {:RESULT = me;:};
mulExpression ::= mulExpression:me STAR:st factor:fa {:RESULT = new BinaryExpression(new Position(meleft, meright), st, me, fa);:} | mulExpression:me SLASH:sl factor:fa {:RESULT = new BinaryExpression(new Position(meleft, meright), sl, me, fa);:} | factor:fa {:RESULT = fa;:};
factor ::= expression | MINUS factor;
expression ::= INTLIT:in {:RESULT = new IntLiteral(new Position(intleft, intright), in);:} | variable | LPAREN addexpression RPAREN;
variable ::= IDENT | variable LBRACK addexpression RBRACK;
procedure ::= PROC:proc IDENT:id LPAREN parameterList:pl RPAREN LCURL variableList:vl statementList:st RCURL {:RESULT = new ProcedureDeclaration(new Position(procleft, procright), new Identifier(id), pl, vl, st);:};


//statment result f√ºr klammer auf klammer zu
//Zeile if statement
